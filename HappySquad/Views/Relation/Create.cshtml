@model HappySquad.Models.Relation

@{
    ViewBag.Title = "Соответствия Юнит-Лут";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Relation</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.UnitId)
        </div>
        <div class="editor-field">
            @Html.DropDownList("UnitId", new SelectList(ViewBag.unitList, "Value", "Text"))
            @Html.ValidationMessageFor(model => model.UnitId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.LootId)
        </div>
        <div class="editor-field">
            @Html.DropDownList("LootId", new SelectList(ViewBag.lootList, "Value", "Text"))
            @Html.ValidationMessageFor(model => model.LootId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AddLootName)
        </div>
        <div class="editor-field">
            @Html.ListBoxFor(x => x.AddLootIdArray, new SelectList(ViewBag.lootList, "Value", "Text"))
            @Html.ValidationMessageFor(model => model.AddLootName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ExLootId)
        </div>
        <div class="editor-field">
            @Html.ListBoxFor(x => x.ExLootIdArray, new SelectList(ViewBag.lootList, "Value", "Text"))
            @Html.ValidationMessageFor(model => model.ExLootId)
        </div>

        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.2/themes/smoothness/jquery-ui.css" />

<style>
    .ui-combobox {
        position: relative;
        display: inline-block;
    }

    .ui-button {
        position: absolute;
    }

    .ui-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
    }

    .ui-combobox-input {
        margin: 0;
        padding: 0.3em;
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="http://code.jquery.com/ui/1.10.2/jquery-ui.js"></script>

    <script>
        (function ($)
        {
            var input;

            $.widget("ui.combobox", {
                _create: function () {
                    this.wrapper = $("<span>")
                        .addClass("ui-combobox")
                        .insertAfter(this.element);

                    this._createAutocomplete();
                    this._createShowAllButton();
                },
                _createAutocomplete: function () {
                    var selected = this.element.children(":selected"),
                        value = selected.val() ? selected.text() : "";

                        input = $("<input>")
                        .appendTo(this.wrapper)
                        .val(value)
                        .attr("title", "")
                        .addClass("ui-combobox-input ui-widget ui-widget-content ui-corner-left")
                        .autocomplete({
                            delay: 0,
                            minLength: 0,
                            source: $.proxy(this, "_source")
                        })
                        .tooltip({
                            tooltipClass: "ui-state-highlight"
                        });

                    this._on(input, {
                        autocompleteselect: function (event, ui) {
                            ui.item.option.selected = true;
                            this._trigger("select", event, {
                                item: ui.item.option
                            });
                        },

                        autocompletechange: "_removeIfInvalid"
                    });
                },

                _createShowAllButton: function () {
                    var wasOpen = false;

                    $("<a>")
                        .attr("tabIndex", -1)
                        .attr("title", "Show All Items")
                        .tooltip()
                        .appendTo(this.wrapper)
                        .button({
                            icons: {
                                primary: "ui-icon-triangle-1-s"
                            },
                            text: false
                        })
                        .removeClass("ui-corner-all")
                        .addClass("ui-corner-right ui-combobox-toggle")
                        .mousedown(function () {
                            wasOpen = input.autocomplete("widget").is(":visible");
                        })
                        .click(function () {
                            input.focus();

                            // Close if already visible
                            if (wasOpen) {
                                return;
                            }

                            // Pass empty string as value to search for, displaying all results
                            input.autocomplete("search", "");
                        });
                },

                _source: function (request, response) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                    response(this.element.children("option").map(function () {
                        var text = $(this).text();
                        if (this.value && (!request.term || matcher.test(text)))
                            return {
                                label: text,
                                value: text,
                                option: this
                            };
                    }));
                },

                _removeIfInvalid: function (event, ui) {

                    // Selected an item, nothing to do
                    if (ui.item) {
                        return;
                    }

                    // Search for a match (case-insensitive)
                    var value = input.val(),
                        valueLowerCase = value.toLowerCase(),
                        valid = false;
                    this.element.children("option").each(function () {
                        if ($(this).text().toLowerCase() === valueLowerCase) {
                            this.selected = valid = true;
                            return false;
                        }
                    });

                    // Found a match, nothing to do
                    if (valid) {
                        return;
                    }

                    // Remove invalid value
                    input
                        .val("")
                        .attr("title", value + " didn't match any item")
                        .tooltip("open");
                    this.element.val("");
                    this._delay(function () {
                        input.tooltip("close").attr("title", "");
                    }, 2500);
                    input.data("ui-autocomplete").term = "";
                },

                _destroy: function () {
                    this.wrapper.remove();
                    this.element.show();
                }
            });
        })(jQuery);

        $(function () {
            $("#UnitId").combobox();
            $("#UnitId").toggle();
        });
    </script>
}
